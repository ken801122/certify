name: build and test .NET Core 8.0 Linux

on:
  push:
  pull_request:
    branches: [ release, development ]
    # paths:
    # - '**.cs'
    # - '**.csproj'

env:
  DOTNET_VERSION: '8.0.100' # The .NET SDK version to use

jobs:
  build-and-test:

    name: build-and-test-linux
    runs-on: ubuntu-latest
    steps:
    - name: Clone webprofusion/certify
      uses: actions/checkout@master
      with:
        path: ./certify

    - name: Clone webprofusion/anvil
      uses: actions/checkout@master
      with:
        repository: webprofusion/anvil
        ref: refs/heads/main
        path: ./libs/anvil

    - name: Clone webprofusion/certify-plugins (development branch push)
      if: ${{ github.event_name == 'push' && contains(github.ref_name, '_dev') }}
      uses: actions/checkout@master
      with:
        repository: webprofusion/certify-plugins
        ref: refs/heads/development    
        path: ./certify-plugins

    - name: Clone webprofusion/certify-plugins (release branch push)
      if: ${{ github.event_name == 'push' && contains(github.ref_name, '_rel') }}
      uses: actions/checkout@master
      with:
        repository: webprofusion/certify-plugins
        ref: refs/heads/release    
        path: ./certify-plugins

    - name: Clone webprofusion/certify-plugins (pull request)
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/checkout@master
      with:
        repository: webprofusion/certify-plugins
        ref: ${{ github.base_ref }}    
        path: ./certify-plugins

    - name: Setup .NET Core
      uses: actions/setup-dotnet@master
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Step CLI
      run: wget https://dl.smallstep.com/gh-release/cli/docs-cli-install/v0.23.0/step-cli_0.23.0_amd64.deb && sudo dpkg -i step-cli_0.23.0_amd64.deb

    - name: Pull step-ca Docker Image
      run: docker pull smallstep/step-ca

    - name: Install Test Report Tools
      run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.2.0 && dotnet tool install --global LiquidTestReports.Cli --version 1.4.3-beta

    - name: Install Dependencies
      run: dotnet restore
      working-directory: ./certify/src/Certify.Tests/Certify.Core.Tests.Unit

    - name: Build Certify.Core.Tests.Unit
      run: dotnet build -c Debug --no-restore -f net8.0
      working-directory: ./certify/src/Certify.Tests/Certify.Core.Tests.Unit
    
    - name: Run Certify.Core.Tests.Unit Tests
      run: dotnet test Certify.Core.Tests.Unit.dll -v normal -f net8.0 --logger trx --logger html --collect:"XPlat Code Coverage" --results-directory "TestResults-8_0-${{ runner.os }}" /testadapterpath:$HOME/.nuget/packages/coverlet.collector/6.0.0/build/netstandard1.0
      working-directory: ./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0

    - name: Generated Test Results Report
      run: liquid --inputs "File=./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}/*.trx;Format=Trx" --output-file ./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}/test_results.md --title "Test Results" && cat ./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}/test_results.md > $GITHUB_STEP_SUMMARY
    
    - name: Generated Test Coverage Report
      run: reportgenerator -reports:./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}/**/coverage.cobertura.xml -targetdir:./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }} -reporttypes:MarkdownSummaryGithub "-title:Test Coverage" && cat ./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}/SummaryGithub.md > $GITHUB_STEP_SUMMARY

    # - name: Upload Certify.Core.Tests.Unit Test Results and Coverage
    #   uses: actions/upload-artifact@master
    #   with:
    #     name: dotnet-results-8_0-${{ runner.os }}
    #     path: ./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}
    #   # Use always() to always run this step to publish test results when there are test failures
    #   if: ${{ always() }}

    # - name: Publish Test Results
    #   uses: EnricoMi/publish-unit-test-result-action@v2
    #   if: always()
    #   with:
    #     files: ./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}/*.trx

    # - name: Code Coverage Report
    #   uses: irongut/CodeCoverageSummary@v1.3.0
    #   with:
    #     filename: ./certify/src/Certify.Tests/Certify.Core.Tests.Unit/bin/Debug/net8.0/TestResults-8_0-${{ runner.os }}/coverage.cobertura.xml
    #     badge: true
    #     fail_below_min: false
    #     format: markdown
    #     hide_branch_rate: false
    #     hide_complexity: false
    #     indicators: true
    #     output: both
    #     thresholds: '50 70'

    # - name: Add Coverage PR Comment
    #   uses: marocchino/sticky-pull-request-comment@v2.8.0
    #   if: github.event_name == 'pull_request'
    #   with:
    #     recreate: true
    #     path: code-coverage-results.md
